<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="frm_test" width="1280" height="720" titletext="New Form">
    <Layouts>
      <Layout height="720" mobileorientation="landscape" width="1280">
        <Static id="Static00" taborder="0" text="Hello Nxcr17!! 안녕" left="96" top="61" width="120" height="60" onclick="Static00_onclick" font="20px/normal &quot;Gulim&quot;"/>
        <Button id="Button00" taborder="1" text="버튼입니다" left="260" top="75" width="120" height="45" onclick="Button00_onclick"/>
        <Edit id="Edit00" taborder="2" left="96" top="165" width="140" height="20" onchanged="myFunc"/>
        <Button id="Button01" taborder="3" text="버튼입니다2" left="260" top="155" width="120" height="50" onclick="myEvent"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[
this.Static00_onclick = function(obj:nexacro.Static,e:nexacro.ClickEventInfo)
{
	
};

this.Button00_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	// this -> 현재 form 영역을 가리키는 scope
	this.alert("클릭하였습니다");
	// nexacro.getApplication().alert("클릭하였습니다");

	// application -> 넥사크로 어플리케이션에서 사용하는 전역 scope
	nexacro.getApplication().trace("Button00 클릭됨");
	// trace() -> output 창에 log를 찍는 역할
	
	// alert(), trace()는 앞에 영역을 작성하지 않아도 동작하지만
	// 다른 함수나 변수를 호출할 때는 범위에 대해서 고려해 사용해야 한다.
	
};

// 버튼 클릭 이벤트는 자동 생성 구문을 통해 만들어지지만
// 직접 이벤트를 작성하여 바인딩할 수도 있다.
this.myEvent = function() {
	alert("나의 이벤트 등록!");
	trace("나의 이벤트 동작함!");
}

// edit component에 동작시킬 function
this.myFunc = function() {
	// Edit00의 값을 받아 저장할 변수 생성
	// Edit00은 Form 내부에 있으므로 this 범위 지정자로 접근 가능
	var str = this.Edit00.value;
	
	// Edit00의 값을 알림창으로 띄운다
	alert(str);
	
	// 현재 Edit00의 값을 변경한다.
	// Setter는 제공되는 property 앞에 'set_'을 붙여서 사용
	this.Edit00.set_value("클릭 이벤트 구동!");
}
]]></Script>
  </Form>
</FDL>
