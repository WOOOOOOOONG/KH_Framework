※ 기본 ※
-pom.xml 
한 프로젝트에서 자바 버전, 라이브러리, 플러그인 구성을 통합 관리할 수 있게 설정 정보를 XML로 문서화한 것
요약->라이브러리 관리하는 maven에 대한 설정
플러그인: 내부에 무언가 꽂는 것과 같이 어떤 기능을 사용할 수 있게 해주는 것
프로젝트 정보 : modelVersion, groupId, artifactId 등
repositories : 기본 저장소에서 다운받지 못하는 경우 직접 다운받고자 하는 사설 저장소 경로 등록
dependencies : 다운받고자 하는 라이브러리들

-framework 특징
개발자가 따라야 하는 가이드 제공
개발할 수 있는 범위가 정해져 있음
개발자를 위한 다양한 도구와 플러그인들을 지원한다

-framework 장단점
장 : 개발 시간 단축, 정형화된 도구들로 일정수준 이상의 품질 기대 가능, 유지보수가 쉬움
단 : 의존 시 개발자 본연의 능력이 떨어짐, 능력 습득이 쉽지 않음

-spring framework란
자바 플랫폼을 위한 오픈소스 애플리케이션 프레임워크.
동적인 웹사이트 개발을 위한 여러 서비스를 제공한다.

-spring framework 특징
DI(Dependency Injection, 의존성 주입) : 설정 파일이나 어노테이션을 통해 의존 관계(한쪽의 설정파일을 다른 한쪽에도 갖게함)를 설정해 개발자가 직접 의존할 객체를 생성하지 않아도 됨.(bean객체)
Spring AOP(Aspect Oriented Programming) : 트랜잭션, 로깅, 보안 등 여러 모듈이나 계층에서 공통으로 필요로 하는 기능들을 분리해 보관함
POJO(Plain Old Java Object) : 특정 라이브러리를 사용할 필요가 없어 개발이 쉬우며 기존 라이브러리의 지원이 용이함
IOC(Inversion of Control, 제어의 역전) : 객체 생성, 소멸 등과 같은 컨트롤, 의존성에 대한 것에 대한 주도권이 개발자가 아닌 프레임워크에 있다
Spring JDBC : Mybatis와 같은 DB를 처리하는 영속성 프레임워크와 연결 가능한 인터페이스 제공
Spring MVC : MVC 디자인 패턴을 통해 M,V,C 사이의 의존 관계를 DI 컨테이너에서 관리해 개발자가 아니라 서버가 객체들을 관리하는 웹 애플리케이션 구축
PSA(Portable Service Abstraction) : 여러 모듈을 사용함에 있어 별도의 추상화 레이어를 제공해 프로그램에 집중할 수 있음.

-Core Container
Beans, Core, Context, Expression Language

-Spring 구성 모듈
Data 접근 계층 : 데이터 접근
Web 계층 : Servlet 등을 Spring MVC 구성으로 지원
AOP 계층 : 공통된 코드를 한 쪽으로 빼내 필요한 시점에 해당 코드를 첨부하기 위해 지원하는 계층으로, 별도 proxy를 두어 동작(중복코드관리)
Core Container : 모든 스프링 관련 모듈이 이 Core Container 기반으로 구축. IoC, DI 기능 지원, BeanFactory 기반으로 Bean클래스 제어할 수 있는 기능

-web.xml
urlpattern에 맞는 servlet 매핑되어 있는 DispatcherServlet 생성
root-context.xml(DB관련 설정)
servlet-context.xml(스프링 설정 xml 불러옴)
HandlerMapping(클라이언트의 요청 URL을 어떤 컨트롤러가 처리할지 결정)
ViewResolver(해당 결과에 대해 어디로 리턴할지 결정. 아무런 설정 없으면 servlet-context.xml에서 defaultViewResolver)
DispathcerServlet(클라이언트의 요청을 전달받고 요청에 맞는 컨트롤러가 리턴한 결과값을 view에 전달해 알맞은 응답 생성)

-spring MVC 순서
web(client, request) -> dispatcher servlet -> handler mapping -> dispathcer servlet -> controller -> service -> dao -> db -> controller -> dispatcher servlet -> view resolver -> view -> view resolver -> dispatcer servlet -> web(client, response)






※ DI XML ※
-root-context.xml
bean, aop, transaction 등 설정
<beans> : xml의 최상위 태그로 여러가지 namespace(p,c,aop,context,tx,mvc 등) 설정
<bean> : 스프링에서 활용할 POJO 객체(id,class,scope) 등록시 사용
<import> : 설정파일(resource) 불러오는 태그

property
<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
	<property name="mappings">
		<props>
			<prop key="/login.do">login</prop>
		</props>
	</property>
	<property name="명칭" value="값"/>
	<property name="명칭" ref="bean id명"/>
</bean>
<bean id="login" class="com.kh.mvc2.user.controller.LoginController"></bean>

constructor-arg
<bean id | name = "~" class="~" [기타옵션]>
	<constructor-arg value | ref="값" | bean id명"/>
</bean>

-Spring XMl 방식 장/단점
모든 bean을 명시적으로 xml에 등록하는 방버
장: 생성되는 모든 bean을 xml에서 확인 가능, 관리 편의성이 높음
단: bean 개수가 많으면 xml파일 관리하기 힘듦, 충돌 발생 가능성, setter 무조건 필요







※ DI Annotation ※
-Annotation 종류
@Component : 객체를 나타내는 일반적인 타입으로 <bean>태그와 동일한 역할
@Controller(name) : view에서 전달된 웹 요청과 응답을 처리하는 클래스(controller)
@Service(name) : 서비스 레이어, 비즈니스 로직을 가진 클래스(service)
@Repository(name) : 영속성을 갖는 속성(파일,DB)을 가진 클래스(dao)
@Autowired : 정밀한 의존관계 주입(DI)이 필요한 경우 사용. 변수, setter메소드, 생성자,일반메소드에 적용 가능. propery/consrtuctor-arg와 동일한 역할
Resource: 애플리케이션에서 필요로하는 자원 자동연결시 사용(name 이용)
@Value: 단순한 값 주입시 사용하는 어노테이션
@RequestMapping(value="", method=RequestMethod.POST)

-빈 스캐닝(Bean Scanning)
bean으로 사용될 클래스에 특별한 어노테이션을 부여하고, spring 컨테이너가 이를 통해 자동으로 bean을 등록하는 방식
장: 어노테이션을 부여해 xml문서 생성과 관리에 따른 수고를 덜고 개발 속도 향상, 개발자간 xml 설정 파일 충돌 최소화
단 : 애플리케이션에 등록될 bean의 종류와 의존관계를 한눈에 파악하기 힘듦







※ IoC, DI ※
-IoC 컨테이너
정의 : 스프링에서 관리하는 객체를 빈이라 하고, 해당 빈들을 관리하는 컨테이너를 bean factory 라고 함
역할 : 객체 생명주기와 의존성 관리, VO(DTO/POJO) 객체의 생성,초기화,소멸 처리 담당, 객체 생성 권한을 컨테이너에게 맡김으로써 소스코드 구현시간 단축
bean : 스프링이 IoC방식으로 관리하는 클래스. 스프링에서 생성과 제어를 담당하는 객체
bean factory : 스프링 IoC를 담당하는 핵심 컨테이너. bean 등록,생성,조회,반환 기능 담당

-DI
IoC 구현의 핵심 기술. 사용하는 객체를 직접 생성하는것이 아닌 컨테이너가 빈의 설정 정보를 읽어와 자동으로 해당 객체에 연결
장: 코드 단순화, 객체간 종속관계(결합도) 해소
<bean id="student" class="com.kh.spring.person.model.vo.Student">
	<constructor-arg index="0" value="홍길동"/>
	<constructor-arg index="1" value="money"/>
</bean>
<bean id="money" class="com.kh.spring.wallet.model.vo.Wallet"/>






※ Logging ※
-로그
뜻 : 기록을 남기는 것
사용 이유 : 애플리케이션 운영시 로그의 효율적인 관리가 가능(콘솔 또는 파일로). println은 성능저하 야기
장점 : 프로그램 문제 파악 용이, 빠르고 효율적인 디버깅 가능, 수행내역 파악 간단, 로그 이력을 파일, DB 등으로 남길 수 있음
단점 : 로그에 대한 디바이스 입출력으로 인해 런타임 오버헤드 발생, 전체 코드 사이즈 증가, 심한 경우 성능에 영향을 미침, 개발 중간에 로깅 코드 추가의 어려움

-Loggin framework(log4j/logback/slf4j)
spring 기본은 log4j
logback이 10배 빠르지만, 설치가 귀찮으므로 간단히 변환해주는 slf4j 제공

-log4j.xml 구조
appender : 전달된 로그를 어디에 출력할지 결정(콘솔,파일기록,DB저장)
Logger/root: 출력할 메시지 appender에 전달(name:로그 주체, additivity:로그가 상위로 전달할지여부(기본true), appender-ref: ref속성값으로 appender태그 name값 지정, level: 로그레벨 설정)

-Appenders 종류
ConsoleAppender: 로그를 콘솔에 출력하기 위한 appender
JDBCAppender : 로그를 RDB에 출력하기 위한 appender
FileAppender : //
RollingFileAppender : fileAppender 보완한 개념. 일정 조건 후(하루마다 등) 기존 파일을 백업파일로 바꾸고 다시 처음부터 로깅 시작(대표: DailyRollingFileAppender)

-Layout
로그를 어떤 형식으로 출력할지 결정
종류 : PatternLayout(가장 적합), DateLayout, HTMLLayout, SimpleLayout, XMLLayout

- 패턴 지정 방법
%p(priority), %m(로그내용), %d(이벤트발생시간), %t(쓰레드이름), %n(개행), %C(클래스명), %c(카테고리), %F(파일명), %l(caller정보 L임), %L(caller 라인수), %M(method이름), %r(발생시간)



※ mybatis-config.xml ※
<configuration>
	<settings>
		<!-- 만약에 null로 데이터가 전달 되었다면 빈칸이 아닌 NULL로 인식 -->
		<setting name="jdbcTypeForNull" value="NULL"/>
	</settings>

	<typeAliases>
		<typeAlias type="com.kh.spring.member.model.vo.Member" alias="Member"/>
		<typeAlias type="com.kh.spring.notice.model.vo.Notice" alias="Notice"/>
		<typeAlias type="com.kh.spring.notice.model.vo.Search" alias="Search"/>
		<typeAlias type="com.kh.spring.board.model.vo.Board" alias="Board"/>
		<typeAlias type="com.kh.spring.board.model.vo.Reply" alias="Reply"/>
	</typeAliases>
	
	<mappers>
		<mapper resource="mappers/member-mapper.xml"/>
		<mapper resource="mappers/notice-mapper.xml"/>
		<mapper resource="mappers/board-mapper.xml"/>
	</mappers>

</configuration>

※ 인코딩 ※
<bean id="bcryptPasswordEncoder" 
class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>









※ 기타 ※
spring 사용 시 무조건 서블릿을 통해 jsp로 이동해야 하는듯 ?

postcodify 우편번호 api

비밀번호 평문으로 저장하면 고소당할 수 있기에 암호화 한다. 그것은 스프링에서 제공하는 bcrypt 사용

-parameter 가져오기
1. @RequestParam
2. @ModelAttribute

- return 하기
1. model + String "View" 
2. ModelAndView
+ SessionAttributes({"". ""})

 * forward
 * 요청을 한 페이지의 request, response 정보를 그대로 클라이언트로 전달하고
 * 주소 값이 변하지 않음.

 * redirect
 * 기존 request, response 객체가 삭제되고 지정한 주소(url)로
 * 새로 요청을 보내어 새로운 request, response 객체를 생성하고 주소 값이 바뀜.
